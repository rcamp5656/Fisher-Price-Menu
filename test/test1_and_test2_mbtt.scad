/* This file has been generated by "music box tune tracker" v1.0 on 05 Jan 2020 19:42
 * https://github.com/odrevet/music-box-tune-tracker
 * using "Fred's Fisher Price record creator" .scad template file
 * http://www.instructables.com/id/3D-printing-records-for-a-Fisher-Price-toy-record-/
 */

// Configuration
$fn = 100;
hStock = 5;
rStock = 60.58;
oDrive = 21.8;
rDrive = 1.55;
hInset = 1;
rInset = 25.6;
hGroove = 1.2;
overlap = 0.2;

hasSecondSide = 1;

// Create disc
module createDisc() {
	union() {

		createBlank();

		// Add the notes for the song. This part is dynamically generated.
		pin(30.69,31.89,-3.6505753114420085,0);
		pin(30.69,31.89,4.721517711813806,0);
		pin(30.69,31.89,13.093610735069621,0);
		pin(30.69,31.89,21.465703758325432,0);
		pin(30.69,31.89,29.837796781581254,0);
		pin(30.69,31.89,38.20988980483707,0);
		pin(30.69,31.89,46.581982828092876,0);
		pin(30.69,31.89,54.954075851348684,0);
		pin(30.69,31.89,63.326168874604505,0);
		pin(30.69,31.89,71.69826189786032,0);
		pin(30.69,31.89,80.07035492111613,0);
		pin(30.69,31.89,88.44244794437196,0);
		pin(30.69,31.89,96.81454096762775,0);
		pin(30.69,31.89,105.18663399088356,0);
		pin(30.69,31.89,113.5587270141394,0);
		pin(30.69,31.89,121.93082003739522,0);
		pin(30.69,31.89,130.302913060651,0);
		pin(30.69,31.89,138.67500608390682,0);
		pin(30.69,31.89,147.04709910716267,0);
		pin(30.69,31.89,155.41919213041845,0);
		pin(30.69,31.89,163.79128515367427,0);
		pin(30.69,31.89,172.16337817693008,0);
		pin(30.69,31.89,180.5354712001859,0);
		pin(30.69,31.89,188.90756422344174,0);
		pin(30.69,31.89,197.27965724669752,0);
		pin(30.69,31.89,205.65175026995334,0);
		pin(30.69,31.89,214.02384329320915,0);
		pin(30.69,31.89,222.39593631646497,0);
		pin(30.69,31.89,230.7680293397208,0);
		pin(30.69,31.89,239.1401223629766,0);
		pin(30.69,31.89,247.51221538623247,0);
		pin(30.69,31.89,255.88430840948826,0);
		pin(30.69,31.89,264.2564014327441,0);
		pin(30.69,31.89,272.6284944559999,0);
		pin(30.69,31.89,281.00058747925567,0);
		pin(30.69,31.89,289.3726805025115,0);
		pin(30.69,31.89,297.74477352576736,0);
		pin(30.69,31.89,306.11686654902314,0);
		pin(30.69,31.89,314.48895957227893,0);
		pin(30.69,31.89,322.86105259553483,0);
		pin(30.69,31.89,331.23314561879056,0);
		pin(30.69,31.89,339.6052386420464,0);
		pin(30.69,31.89,347.97733166530224,0);

		title("TEST",0);

		pin(27.95,29.15,363.9997053761314,1);
		pin(27.95,29.15,238.41831002729415,1);
		pin(27.95,29.15,112.83691467845696,1);
		pin(29.15,30.349999999999998,359.6787615499628,1);
		pin(29.15,30.349999999999998,242.4694592243814,1);
		pin(29.15,30.349999999999998,234.0973662011256,1);
		pin(29.15,30.349999999999998,116.88806387554419,1);
		pin(29.15,30.349999999999998,108.51597085228835,1);
		pin(30.69,31.89,355.2784822881862,1);
		pin(30.69,31.89,246.44127298586062,1);
		pin(30.69,31.89,229.697086939349,1);
		pin(30.69,31.89,120.8598776370234,1);
		pin(30.69,31.89,104.11569159051174,1);
		pin(31.89,33.09,350.97972891297565,1);
		pin(31.89,33.09,250.51461263390587,1);
		pin(31.89,33.09,225.39833356413843,1);
		pin(31.89,33.09,124.93321728506862,1);
		pin(31.89,33.09,99.8169382153012,1);
		pin(33.51,34.71,346.6054649042678,1);
		pin(33.51,34.71,254.51244164845386,1);
		pin(33.51,34.71,221.0240695554306,1);
		pin(33.51,34.71,128.9310462996166,1);
		pin(33.51,34.71,95.44267420659338,1);
		pin(34.71,35.910000000000004,342.3242848808313,1);
		pin(34.71,35.910000000000004,258.6033546482732,1);
		pin(34.71,35.910000000000004,216.7428895319941,1);
		pin(34.71,35.910000000000004,133.02195929943593,1);
		pin(34.71,35.910000000000004,91.16149418315689,1);
		pin(34.71,35.910000000000004,7.440563950598744,1);
		pin(36.224999999999994,37.425,337.98708068720384,1);
		pin(36.224999999999994,37.425,262.63824347790154,1);
		pin(36.224999999999994,37.425,212.40568533836662,1);
		pin(36.224999999999994,37.425,137.0568481290643,1);
		pin(36.224999999999994,37.425,86.8242899895294,1);
		pin(36.224999999999994,37.425,11.475452780227101,1);
		pin(37.425,38.625,333.71920530920886,1);
		pin(37.425,38.625,208.13780996037164,1);
		pin(37.425,38.625,82.55641461153442,1);
		pin(39.025,40.225,266.60555097582215,1);
		pin(39.025,40.225,141.02415562698496,1);
		pin(39.025,40.225,15.442760278147716,1);
		pin(40.225,41.425000000000004,329.32541695611525,1);
		pin(40.225,41.425000000000004,203.744021607278,1);
		pin(40.225,41.425000000000004,78.16262625844081,1);
		pin(41.8,43.0,270.6032487212723,1);
		pin(41.8,43.0,145.02185337243503,1);
		pin(41.8,43.0,19.440458023597785,1);
		pin(43.0,44.2,324.959870108594,1);
		pin(43.0,44.2,199.37847475975676,1);
		pin(43.0,44.2,73.7970794109196,1);
		pin(44.625,45.825,274.62124298060525,1);
		pin(44.625,45.825,149.03984763176803,1);
		pin(44.625,45.825,23.458452282930807,1);
		pin(45.825,47.025000000000006,320.61317889939636,1);
		pin(45.825,47.025000000000006,195.0317835505591,1);
		pin(45.825,47.025000000000006,69.45038820172192,1);
		pin(47.355,48.555,278.6636615690476,1);
		pin(47.355,48.555,153.08226622021039,1);
		pin(47.355,48.555,27.500870871373195,1);
		pin(48.555,49.755,316.2894695977818,1);
		pin(48.555,49.755,190.70807424894463,1);
		pin(48.555,49.755,65.12667890010744,1);
		pin(50.114999999999995,51.315,282.72018976182414,1);
		pin(50.114999999999995,51.315,157.13879441298695,1);
		pin(50.114999999999995,51.315,31.557399064149763,1);
		pin(51.315,52.515,311.9789937088906,1);
		pin(51.315,52.515,186.39759836005334,1);
		pin(51.315,52.515,60.81620301121609,1);
		pin(52.91,54.11,286.7886662233812,1);
		pin(52.91,54.11,161.20727087454404,1);
		pin(52.91,54.11,35.625875525706704,1);
		pin(54.11,55.31,307.6797575357291,1);
		pin(54.11,55.31,290.9355714892174,1);
		pin(54.11,55.31,182.09836218689185,1);
		pin(54.11,55.31,165.35417614038022,1);
		pin(54.11,55.31,56.51696683805466,1);
		pin(54.11,55.31,39.77278079154297,1);
		pin(55.699999999999996,56.9,303.42711406816966,1);
		pin(55.699999999999996,56.9,295.0550210449138,1);
		pin(55.699999999999996,56.9,177.84571871933244,1);
		pin(55.699999999999996,56.9,169.47362569607665,1);
		pin(55.699999999999996,56.9,52.264323370495276,1);
		pin(55.699999999999996,56.9,43.89223034723943,1);
		pin(56.9,58.1,299.2056709497306,1);
		pin(56.9,58.1,173.62427560089338,1);
		pin(56.9,58.1,48.042880252056136,1);

		title("test2",1);


	}
}

// Create the blank, ready for dynamically added pins
module createBlank() {

	difference() {

		// stock
		cylinder(h=hStock, r=rStock);

		// top cutout
		translate(v = [0,0,hStock-hInset+overlap]) {
			cylinder(h=hInset + overlap, r=rInset);
		}

		// Bottom cutout lets the disc sit flatter, but some printers my struggle with the overhang
		translate(v = [0,0,-overlap]) {
			cylinder(h=hInset + overlap, r=rInset);
		}

		// Centre hole
		cylinder(h=hStock, r=3.22);

		// Drive holes
		translate(v = [0,oDrive,0]) { cylinder(h=hStock, r=rDrive); }
		translate(v = [0,-oDrive,0]) { cylinder(h=hStock, r=rDrive); }
		translate(v = [oDrive,0,0]) { cylinder(h=hStock, r=rDrive); }
		translate(v = [-oDrive,0,0]) { cylinder(h=hStock, r=rDrive); }

		// Tracks - each one for two notes
		track(28.15, 0);
		track(30.89, 0);
		track(33.71, 0);
		track(36.425, 0);
		track(39.225, 0);
		track(42, 0);
		track(44.825, 0);
		track(47.555, 0);
		track(50.315, 0);
		track(53.11, 0);
		track(55.9, 0);

		if (hasSecondSide > 0) {
			track(28.15, 1);
			track(30.89, 1);
			track(33.71, 1);
			track(36.425, 1);
			track(39.225, 1);
			track(42, 1);
			track(44.825, 1);
			track(47.555, 1);
			track(50.315, 1);
			track(53.11, 1);
			track(55.9, 1);
		}
	}
}

// Negative for a double track
module track(inner, onSecondSide) {
	if (onSecondSide > 0) {
		translate(v = [0,0,-overlap]) {
			difference() {
				cylinder(h=hGroove+overlap, r=inner+2);
				cylinder(h=hGroove+overlap, r=inner);
			}
		}
	}
	else {
		translate(v = [0,0,hStock-hGroove]) {
			difference() {
				cylinder(h=hGroove+overlap, r=inner+2);
				cylinder(h=hGroove+overlap, r=inner);
			}
		}
	}

}

// Create a pin at a certain angle
module pin(inner, outer, angle, onSecondSide)
{
	rotate(a=angle) {
		if (onSecondSide > 0) {
			translate(v=[inner, -0.5, - overlap]) {
				# cube (size=[outer-inner, 1 ,hGroove + overlap], center=false);
			}
		} else {
			translate(v=[inner, -0.5, hStock - hGroove - overlap]) {
				# cube (size=[outer-inner, 1 ,hGroove + overlap], center=false);
			}
		}
	}
}

module title(text, onSecondSide)
{
	if (onSecondSide>0)
		writecylinder(text, [0,0,-hInset], radius=20, height=hStock-hInset, h=3, t=hInset, face="bottom");
	else
		writecylinder(text, [0,0,0], radius=20, height=hStock-hInset, h=3, t=hInset, face="top");
}



// Do the work
createDisc();
